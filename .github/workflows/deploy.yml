name: Build and Deploy Multi-Architecture

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'package.json'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push multi-architecture image
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Create optimized deployment script
      run: |
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        set -e
        
        DOCKER_USERNAME=$1
        HOST_IP=$2
        
        echo "üöÄ Starting fast PlacementPro deployment on $HOST_IP..."
        
        # Quick cleanup
        sudo docker stop placementpro 2>/dev/null || true
        sudo docker rm placementpro 2>/dev/null || true
        
        # Clean up old images to save space
        sudo docker image prune -f || true
        
        # Kill any processes on required ports
        for port in 3000 5000 8000 80; do
          sudo lsof -ti:$port 2>/dev/null | xargs -r sudo kill -9 2>/dev/null || true
        done
        
        echo "üì• Pulling pre-built multi-architecture image..."
        sudo docker pull $DOCKER_USERNAME/placementpro:latest
        
        # Create required directories
        mkdir -p /home/ec2-user/placementpro/{temp,static/reports,static/summaries,static/transcripts}
        cd /home/ec2-user/placementpro
        
        echo "üöÄ Starting PlacementPro container with optimized settings..."
        sudo docker run -d \
          --name placementpro \
          -p 80:3000 -p 3000:3000 -p 5000:5000 -p 8000:8000 \
          -v $(pwd)/temp:/app/temp \
          -v $(pwd)/static:/app/static \
          --restart unless-stopped \
          --memory="1200m" \
          --cpus="1.0" \
          --health-cmd="curl -f http://localhost:8000/api/health || exit 1" \
          --health-interval=30s \
          --health-timeout=10s \
          --health-retries=3 \
          $DOCKER_USERNAME/placementpro:latest
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Container failed to start"
          sudo docker logs placementpro 2>/dev/null || echo "No logs available"
          exit 1
        fi
        
        echo "‚è≥ Waiting for services to start..."
        sleep 45
        
        # Health checks
        echo "üè• Health checks..."
        
        timeout 10 curl -f http://localhost:3000 > /dev/null && echo "‚úÖ Frontend: OK" || echo "‚ö†Ô∏è Frontend: Starting..."
        timeout 10 curl -f http://localhost:8000/api/health > /dev/null && echo "‚úÖ Backend: OK" || echo "‚ö†Ô∏è Backend: Starting..."
        timeout 5 curl -f http://localhost:5000 > /dev/null && echo "‚úÖ Chat Server: OK" || echo "‚ö†Ô∏è Chat Server: Starting..."
        
        echo ""
        echo "üéâ PlacementPro deployment complete!"
        echo "üåê MAIN WEBSITE: http://$HOST_IP"
        echo "üìñ API Documentation: http://$HOST_IP:8000/docs"
        echo "üí¨ Chat Server: http://$HOST_IP:5000"
        EOL
        chmod +x deploy.sh

    - name: Deploy to EC2
      uses: easingthemes/ssh-deploy@v4.1.10
      with:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.EC2_HOST }}
        REMOTE_USER: ec2-user
        SOURCE: "deploy.sh"
        TARGET: "/home/ec2-user"
        SCRIPT_AFTER: "cd /home/ec2-user && bash deploy.sh ${{ secrets.DOCKER_USERNAME }} ${{ secrets.EC2_HOST }}"
