name: Deploy PlacementPro to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI app
      run: |
        python -c "from main import app; print('âœ… App loads successfully')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker build -t $DOCKER_USERNAME/placementpro:latest .
        docker push $DOCKER_USERNAME/placementpro:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 10m
        script: |
          # Install Docker if not present (Amazon Linux commands)
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Navigate to app directory
          cd /home/ec2-user/placementpro || mkdir -p /home/ec2-user/placementpro && cd /home/ec2-user/placementpro
          
          # Stop existing container
          docker stop placementpro || true
          docker rm placementpro || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
          
          # Create directories
          mkdir -p temp static/reports static/summaries static/transcripts
          
          # Run new container
          docker run -d \
            --name placementpro \
            -p 8000:8000 \
            -p 80:8000 \
            -v $(pwd)/temp:/app/temp \
            -v $(pwd)/static:/app/static \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
          
          # Wait for container to start
          sleep 30
          
          # Test the deployment
          curl -f http://localhost:8000/api/health || echo "Health check failed"
          
          # Clean up old images
          docker image prune -f