name: Deploy PlacementPro to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI app
      run: |
        python -c "from main import app; print('✅ App loads successfully')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker build -t $DOCKER_USERNAME/placementpro:latest .
        docker push $DOCKER_USERNAME/placementpro:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 10m
        script: |
          # Ensure Docker is running
          sudo systemctl start docker || true
          
          # Navigate to app directory
          cd /home/ec2-user/placementpro || mkdir -p /home/ec2-user/placementpro && cd /home/ec2-user/placementpro
          
          # Stop existing container
          echo "🛑 Stopping existing container..."
          sudo docker stop placementpro 2>/dev/null || true
          sudo docker rm placementpro 2>/dev/null || true
          
          # Pull latest image
          echo "📥 Pulling latest Docker image..."
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
          
          # Create necessary directories
          mkdir -p temp static/reports static/summaries static/transcripts
          
          # Run new container
          echo "🚀 Starting new container..."
          sudo docker run -d \
            --name placementpro \
            -p 8000:8000 \
            -p 80:8000 \
            -v $(pwd)/temp:/app/temp \
            -v $(pwd)/static:/app/static \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
          
          # Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 45
          
          # Verify container is running
          if sudo docker ps | grep placementpro; then
            echo "✅ Container is running successfully"
            sudo docker ps --filter name=placementpro
          else
            echo "❌ Container failed to start"
            sudo docker logs placementpro 2>/dev/null || echo "No logs available"
            exit 1
          fi
          
          # Health check with retries
          echo "🏥 Running health checks..."
          for i in {1..6}; do
            if curl -f -s http://localhost:8000/api/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Health check attempt $i/6 failed, retrying in 10s..."
              sleep 10
            fi
            
            if [ $i -eq 6 ]; then
              echo "❌ Health check failed after 6 attempts"
              sudo docker logs placementpro
              exit 1
            fi
          done
          
          # Show final status
          echo "📊 Final deployment status:"
          sudo docker ps --filter name=placementpro --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Cleanup old images
          sudo docker image prune -f --filter="dangling=true"
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 PlacementPro is live at: http://${{ secrets.EC2_HOST }}"