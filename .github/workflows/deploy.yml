name: Deploy PlacementPro to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI app
      run: |
        python -c "from main import app; print('‚úÖ App loads successfully')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker build -t $DOCKER_USERNAME/placementpro:latest .
        docker push $DOCKER_USERNAME/placementpro:latest
    
    - name: Deploy to EC2 (Debug SSH Method)
      run: |
        # Create SSH key file
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        # Debug: Show key fingerprint
        echo "Key fingerprint from secret:"
        ssh-keygen -l -f private_key.pem
        
        # Debug: Show key format
        echo "Key format check:"
        head -1 private_key.pem
        tail -1 private_key.pem
        
        # Debug: Test SSH connection with verbose output
        echo "Testing SSH connection..."
        ssh -i private_key.pem \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -v \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
            'echo "SSH connection successful"' || echo "SSH failed, continuing with deployment attempt..."
        
        # Try deployment anyway
        ssh -i private_key.pem \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        
        # Deployment script
        echo "üöÄ Starting PlacementPro deployment..."
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          echo "üì¶ Installing Docker..."
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ec2-user
        fi
        
        # Ensure Docker is running
        sudo systemctl start docker
        
        # Create app directory
        mkdir -p /home/ec2-user/placementpro
        cd /home/ec2-user/placementpro
        
        # Stop existing container
        echo "üõë Stopping existing container..."
        sudo docker stop placementpro 2>/dev/null || true
        sudo docker rm placementpro 2>/dev/null || true
        
        # Pull and run latest image
        echo "üì• Pulling latest Docker image..."
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
        
        # Create directories
        mkdir -p temp static/reports static/summaries static/transcripts
        
        # Run new container
        echo "üöÄ Starting new container..."
        sudo docker run -d \
          --name placementpro \
          -p 8000:8000 \
          -p 80:8000 \
          -v $(pwd)/temp:/app/temp \
          -v $(pwd)/static:/app/static \
          --restart unless-stopped \
          ${{ secrets.DOCKER_USERNAME }}/placementpro:latest
        
        # Wait and verify
        sleep 45
        
        # Check if container is running
        if sudo docker ps | grep placementpro; then
          echo "‚úÖ Container is running successfully"
        else
          echo "‚ùå Container failed to start"
          sudo docker logs placementpro
          exit 1
        fi
        
        # Health check
        for i in {1..5}; do
          if curl -f http://localhost:8000/api/health; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Health check attempt $i/5..."
            sleep 10
          fi
        done
        
        # Cleanup
        sudo docker image prune -f
        echo "üéâ Deployment completed successfully!"
        
        ENDSSH
        
        # Clean up
        rm -f private_key.pem
        echo "üåê Live at: http://${{ secrets.EC2_HOST }}"